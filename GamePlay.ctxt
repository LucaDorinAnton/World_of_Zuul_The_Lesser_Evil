#BlueJ class context
comment0.target=GamePlay
comment0.text=\r\n\ "GamePlay"\ is\ a\ part\ of\ the\ "World\ of\ Zull\:\ The\ Lesser\ Evil"\ game.\r\n\ \r\n\ It\ models\ the\ logic\ behind\ the\ levels\ of\ the\ game,\ which\ can\ take\ place\ in\ some\ rooms.\r\n\ GamePlay\ Objects\ gather\ Information\ about\ the\ player\ and\ construct\ a\ level,\ through\ which\r\n\ the\ player\ must\ navigate\ and\ kill\ enemies.\ Tha\ player\ can\ move\ (using\ WASD),\r\n\ attack/dash\ (using\ Shift\ +\ WASD)\ and\ shoot\ a\ Shotgun\ Shell\ (using\ Alt\ +\ WASD).\r\n\ The\ enemies\ move\ randomly\ around\ the\ level\ as\ long\ as\ they\ are\ far\ away\ from\ the\ player.\r\n\ If\ they\ get\ closer\ to\ the\ player,\ they\ will\ start\ to\ pursue\ him.\ If\ they\ get\ near\ him,\ they\r\n\ will\ damage\ him.\ If\ the\ player\ runs\ out\ of\ Hit\ Points,\ he\ will\ lose\ the\ game.\ When\ all\ enemies\r\n\ have\ been\ killed,\ the\ level\ ends.\r\n\ \r\n\ A\ GamePlayGUI\ object\ in\ order\ to\ display\ the\ level\ to\ the\ user\ and\ capture\ his\ input.\r\n\r\n\ @author\ Anton\ Luca-Dorin\r\n\ @version\ 2017.12.08\r\n
comment1.params=displaySize\ totalEnemies\ maxEnemiesOnScreen\ layout
comment1.target=GamePlay(int,\ int,\ int,\ int)
comment1.text=\r\n\ Create\ a\ GamePlay\ object\r\n\ @param\ displaySize\ the\ size\ of\ display\r\n\ @param\ totalEnemies\ how\ many\ enemies\ the\ level\ will\ have\r\n\ @param\ maxEnemiesOnScreen\ the\ maximum\ amount\ of\ enemies\ which\ can\ exist\ at\ some\ point\r\n\ @param\ layout\ the\ level\ layout\ to\ be\ used\r\n
comment10.params=dir
comment10.target=void\ movePlayer(java.lang.String)
comment10.text=\r\n\ change\ the\ location\ of\ the\ player\r\n\ @param\ dir\ the\ diraction\ in\ which\ the\ player\ moves\r\n
comment11.params=dir
comment11.target=void\ dash(java.lang.String)
comment11.text=\r\n\ perfom\ a\ dash\ attack\r\n\ a\ dash\ is\ a\ jump\ of\ (maximum)\ 3\ points\ in\ a\ direction\r\n\ if\ the\ player\ jumps\ over\ any\ enemies,\ the\ enemies\ get\ killed\r\n\ @param\ dir\ the\ direction\ in\ which\ the\ dash\ is\ performed\r\n
comment12.params=dir
comment12.target=void\ shoot(java.lang.String)
comment12.text=\r\n\ try\ to\ shoot\ a\ shotgun\ shell\ in\ a\ direction\r\n\ the\ success\ of\ this\ action\ depends\ on\ if\ the\ player\ has\ a\ shotgun\ and\ \r\n\ at\ least\ one\ shell.\r\n\ If\ he\ can\ shoot,\ a\ shotgun\ shell\ will\ travel\ along\ a\ straight\ line\r\n\ and\ kill\ any\ enemies\ it\ meets\ in\ it's\ way\ \r\n\ until\ it\ hits\ a\ wall.\r\n\ @param\ dir\ the\ direction\ in\ which\ the\ shotgun\ shell\ will\ be\ fired\r\n
comment13.params=
comment13.target=void\ moveEnemies()
comment13.text=\r\n\ Change\ the\ location\ of\ all\ the\ Enemies\ which\ can\ move\r\n\ this\ method\ gets\ called\ whenever\ the\ player\ executes\ an\ action\r\n
comment14.params=enemy
comment14.target=void\ moveRandom(Enemy)
comment14.text=\r\n\ If\ the\ enemy\ can\ move,\ it\ will\ move\ in\ a\ random\ direction\r\n\ else\ it\ will\ stay\ put\r\n\ @param\ enemy\ the\ enemy\ which\ is\ going\ to\ mover\ andomly\r\n
comment15.params=enemy
comment15.target=void\ moveToPlayer(Enemy)
comment15.text=\r\n\ The\ enemy\ will\ try\ to\ get\ closer\ to\ the\ player\r\n\ @param\ enemy\ the\ enemy\ which\ will\ try\ to\ get\ closer\ to\ the\ player\r\n
comment16.params=enemy
comment16.target=java.lang.String\ getNextMove(Enemy)
comment16.text=\r\n\ This\ method\ uses\ a\ variation\ of\ Lee's\ Algorithm\ \r\n\ in\ order\ to\ determine\ the\ next\ move\ towards\ the\ player.\r\n\ It\ uses\ two\ helper\ bi-dimensional\ Arrays\:\ one\ for\ storing\ distance,\r\n\ and\ one\ for\ storing\ if\ the\ point\ has\ been\ visited.\r\n\ Each\ point\ ads\ it's\ surrounding\ not\ visited\ points\ to\ a\ queue\ with\ \r\n\ a\ distance\ equal\ to\ it's\ own\ distance\ plus\ one\ from\ the\ epicenter(\ the\r\n\ current\ enemy\ location).\ When\ it\ reaches\ the\ player,\ it\ finds\ it's\ way\r\n\ back\ from\ the\ player\ to\ the\ epicenter.\ The\ last\ move\ (reversed)\ is\ \r\n\ the\ desired\ result.\ If\ the\ queue\ becomes\ empty,\ it\ means\ that\ the\ player\ \r\n\ is\ unreachable.\ Then\ the\ enemy\ will\ have\ to\ move\ randomly.\r\n\ \r\n\ @param\ enemy\ the\ enemy\ which\ will\ try\ to\ calculate\ it's\ next\ move\ towards\ the\ player\r\n\ @return\ dir\ the\ direction\ in\ which\ the\ enemy\ will\ need\ to\ move\ in\ order\ to\ get\ closer\ to\ the\ player(reversed)\r\n
comment17.params=enemy
comment17.target=void\ attackPlayer(Enemy)
comment17.text=\r\n\ try\ to\ damage\ the\ player\ if\ he\ is\ next\ to\ an\ enemy.\r\n\ the\ damage\ value\ received\ will\ be\ somewhat\ random.\r\n\ \r\n\ @param\ enemy\ the\ enemy\ who\ will\ try\ to\ damage\ the\ player\r\n
comment18.params=
comment18.target=int\ getPlayerHealth()
comment18.text=\r\n\ @return\ the\ player's\ health\r\n
comment19.params=
comment19.target=int\ getMaxPlayerHealth()
comment19.text=\r\n\ @return\ the\ player's\ max\ health\r\n
comment2.params=playerHealth\ maxPlayerHealth\ shells\ hasShotgun\ playerName
comment2.target=void\ setDetails(int,\ int,\ int,\ boolean,\ java.lang.String)
comment2.text=\r\n\ Get\ all\ other\ required\ information\ in\ order\ to\ successfully\ run\ the\ level\r\n\ This\ is\ not\ included\ in\ the\ constructer\ because\ some\ of\ the\ information\ might\ not\ be\ available\r\n\ at\ the\ time\ of\ construction.\r\n\ @param\ playerHealth\ the\ health\ of\ the\ player\r\n\ @param\ maxPlayerHealth\ the\ maximum\ health\ of\ the\ player\r\n\ @param\ shells\ the\ number\ of\ Shotgun\ shells\ the\ player\ has\r\n\ @param\ hasShotgun\ if\ the\ player\ has\ aquired\ the\ Shotgun\ item\r\n\ @param\ playerName\ the\ name\ of\ the\ player\r\n
comment20.params=
comment20.target=int\ getShells()
comment20.text=\r\n\ @return\ the\ player's\ shells\r\n
comment21.params=
comment21.target=int\ getEnemiesCount()
comment21.text=\r\n\ @return\ the\ number\ of\ enemies\ currently\r\n
comment22.params=
comment22.target=java.lang.String\ getPlayerName()
comment22.text=\r\n\ @return\ the\ player's\ name\r\n
comment23.params=
comment23.target=int[][]\ getDisplay()
comment23.text=\r\n\ @return\ the\ display\ matrix\r\n
comment24.params=
comment24.target=void\ show()
comment24.text=\r\n\ show\ the\ GUI\r\n
comment25.params=
comment25.target=void\ hide()
comment25.text=\r\n\ hide\ the\ GUI\r\n
comment26.params=
comment26.target=int\ getDashRecharge()
comment26.text=\r\n\ @return\ the\ current\ dash\ recharge\ level\r\n
comment27.params=mat
comment27.target=void\ printMat(int[][])
comment27.text=\r\n\ auxilliary\ methode\ for\ debugging\r\n\ print's\ out\ a\ bi-dimensional\ integer\ array\r\n\ @param\ mat\ the\ matrix\ to\ be\ printed\r\n
comment28.params=mat
comment28.target=void\ printMatBool(boolean[][])
comment28.text=\r\n\ auxilliary\ methode\ for\ debugging\r\n\ print's\ out\ a\ bi-dimensional\ boolean\ array\r\n\ @param\ mat\ the\ matrix\ to\ be\ printed\r\n
comment29.params=
comment29.target=boolean\ isDone()
comment29.text=\r\n\ @return\ true\ if\ the\ level\ is\ finished\ (a.k.a\ when\ there\ are\ no\ more\ enemies)\r\n
comment3.params=
comment3.target=void\ initializeDisplay()
comment3.text=\r\n\ Get\ the\ level\ layout\ from\ the\ WallLoader\r\n\ Initialize\ the\ player\r\n\ load\ in\ the\ Enemies\r\n
comment30.params=
comment30.target=void\ gameLost()
comment30.text=\r\n\ If\ the\ player's\ health\ drops\ below\ zero,\r\n\ end\ the\ game\ in\ a\ Loss\ scenario\r\n
comment4.params=x\ y
comment4.target=void\ setPlayer(int,\ int)
comment4.text=\r\n\ Set\ the\ location\ of\ the\ Player\ \r\n\ @param\ x\ the\ new\ x\ Position\ of\ the\ player\r\n\ @param\ y\ the\ new\ y\ position\ of\ the\ Player\r\n
comment5.params=
comment5.target=void\ loadEnemies()
comment5.text=\r\n\ Load\ in\ all\ the\ Enemies\r\n
comment6.params=
comment6.target=void\ spawnAnEnemy()
comment6.text=\r\n\ randomly\ select\ point\ from\ the\ display\ matrix\r\n\ if\ they\ are\ a\ valid\ spawning\ point,\ spawn\ an\ enemy\ there\r\n\ do\ this\ until\ enough\ enemies\ have\ spawned\r\n
comment7.params=
comment7.target=void\ addEnemies()
comment7.text=\r\n\ if\ more\ enemies\ need\ to\ spawn,\r\n\ spawn\ them\ in\r\n
comment8.params=
comment8.target=void\ updateDisplay()
comment8.text=\r\n\ update\ the\ GUI\r\n
comment9.params=dir\ shift\ alt
comment9.target=void\ play(java.lang.String,\ boolean,\ boolean)
comment9.text=\r\n\ main\ Play\ routine\r\n\ gets\ called\ automatically\ by\ the\ KeyListener\ from\ the\ GUI\r\n\ @param\ dir\ the\ direction\ in\ which\ the\ command\ goes\ ("UP",\ "DOWN",\ "LEFT",\ RIGHT")\r\n\ @param\ shift\ if\ shift\ was\ held\ down\ when\ the\ key\ was\ released\r\n\ @param\ alt\ if\ alt\ was\ held\ down\ when\ the\ key\ was\ released\r\n
numComments=31
