#BlueJ class context
comment0.target=Game
comment0.text=\r\n\ \ This\ class\ is\ the\ main\ class\ of\ the\ "World\ of\ Zuul\:\ The\ Lesser\ Evil"\ application.\ \r\n\ \ "World\ of\ Zuul"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\r\n\ \r\n\ \ To\ play\ this\ game,\ call\ the\ "main"\ method\ of\ the\ Game\ class,\ or\r\n\ \ create\ an\ instance\ of\ this\ class\ and\ call\ the\ "play"\r\n\ \ method.\r\n\ \r\n\ \ This\ main\ class\ creates\ and\ initialises\ all\ the\ others\:\ it\ creates\ all\r\n\ \ rooms,the\ charachters,\ the\ items,\ the\ quests,\ the\ gamePlay\ instances,\r\n\ \ the\ parser\ and\ starts\ the\ game.\ \ It\ also\ evaluates\ and\r\n\ \ executes\ the\ commands\ that\ the\ parser\ returns.\r\n\ \r\n\ @author\ \ Michael\ K\u00F6lling\ and\ David\ J.\ Barnes\ and\ Luca-Dorin\ Anton\r\n\ @version\ 2017.12.08\r\n
comment1.params=
comment1.target=Game()
comment1.text=\r\n\ Create\ the\ game\ and\ initialise\ its\ internal\ map.\r\n\ Prepare\ the\ MiniMap.\r\n
comment10.params=
comment10.target=void\ printHelp()
comment10.text=\r\n\ Print\ out\ some\ help\ information.\r\n\ A\ list\ of\ the\ player's\ command\ words\ gets\ printed\r\n
comment11.params=command
comment11.target=void\ goRoom(Command)
comment11.text=\ \r\n\ Try\ to\ move\ in\ to\ a\ room.\ If\ there\ is\ an\ exit,\ enter\ the\ new\r\n\ room,\ otherwise\ print\ an\ error\ message.\ If\ the\ room\ requires\r\n\ a\ key,\ check\ for\ the\ key.\ After\ the\ move\ attempt,\r\n\ update\ the\ miniMap\r\n
comment12.params=
comment12.target=void\ moveCharacters()
comment12.text=\r\n\ Move\ all\ the\ game\ characters\r\n\ which\ can\ move\r\n
comment13.params=room
comment13.target=void\ movePlayer(Room)
comment13.text=\r\n\ Move\ the\ player\ to\ a\ room.\r\n\ If\ the\ room\ has\ a\ gamePlay\ object,\r\n\ check\ if\ the\ level\ is\ finished.\r\n\ If\ it\ isn't,\ do\ the\ level.\ \r\n\ @param\ room\ the\ room\ to\ which\ the\ player\ moves\r\n
comment14.params=command
comment14.target=void\ processMiniMap(Command)
comment14.text=\r\n\ "map"\ command\ has\ been\ issued\r\n\ open/close\ the\ miniMap\r\n\ @param\ command\ the\ issuing\ command\r\n
comment15.params=
comment15.target=void\ doMiniMap()
comment15.text=\r\n\ Update\ the\ minimap\r\n
comment16.params=room
comment16.target=java.util.ArrayList\ getCharactersInRoom(Room)
comment16.text=\r\n\ create\ an\ ArrayList\ of\ all\ the\ characters\r\n\ in\ a\ room\r\n\ @param\ room\ the\ room\ we're\ looking\ within\r\n\ @return\ an\ ArrayList\ containing\ all\ characters\ in\ that\ room\r\n
comment17.params=command
comment17.target=boolean\ quit(Command)
comment17.text=\ \r\n\ "Quit"\ was\ entered.\ Check\ the\ rest\ of\ the\ command\ to\ see\r\n\ whether\ we\ really\ quit\ the\ game.\r\n\ @return\ true,\ if\ this\ command\ quits\ the\ game,\ false\ otherwise.\r\n
comment18.params=
comment18.target=void\ goBack()
comment18.text=\r\n\ Use\ the\ player's\ path\ stack\r\n\ to\ retrace\ his\ steps\ to\ the\ \r\n\ last\ room.\ If\ the\ stack\ is\ empty\r\n\ send\ an\ error\ message\r\n
comment19.params=command
comment19.target=void\ inspect(Command)
comment19.text=\r\n\ "insect"\ was\ issued\ if\ it\ didn't\ have\r\n\ a\ second\ word,\ inspect\ the\ player's\ surroundings\r\n\ (items,\ characters,\ exits)\ and\ return\ the\ gathered\ info\r\n\ If\ there\ is\ a\ second\ word,\ gather\ info\ about\ that\ specific\ item\r\n\ @param\ command\ the\ issuing\ command\r\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\r\n\ Main\ method\ in\ order\ to\ be\ able\r\n\ to\ run\ the\ game\r\n\ @param\ args\ Arguments\ (Array\ of\ String)\r\n
comment20.params=command
comment20.target=void\ take(Command)
comment20.text=\r\n\ "take"\ was\ issued\r\n\ try\ to\ put\ an\ item\ from\ the\ location\r\n\ to\ the\ player's\ inevntory\r\n\ @param\ command\ the\ issuing\ command\r\n
comment21.params=command
comment21.target=void\ inventory(Command)
comment21.text=\r\n\ "inventory"\ was\ issued\r\n\ manage\ the\ player's\ inventory\:\r\n\ list\ all\ items\r\n\ show\ info\ about\ a\ specific\ item\r\n\ use\ an\ item\r\n\ drop\ an\ item\r\n\ @param\ command\ the\ issuing\ command\r\n
comment22.params=command
comment22.target=void\ use(Command)
comment22.text=\r\n\ "use"\ was\ issued\r\n\ try\ to\ use\ an\ item\ from\ the\ players\ location\r\n\ @param\ command\ the\ issuing\ command\r\n
comment23.params=command
comment23.target=void\ interact(Command)
comment23.text=\r\n\ "interact"\ was\ issued\r\n\ Interact\ with\ a\ character\r\n\ \r\n\ This\ means\:\r\n\ Decide\ on\ a\ dialog\ set\ to\ display\ to\ the\ player\r\n\ Execute\ the\ necessary\ actions\ based\ on\ the\ \r\n\ player's\ choice\:\r\n\ \ -start\ quests\r\n\ \ -end\ quests\r\n\ \ -receive\ information\r\n\ \ -\ give/receive\ items\r\n\ \!DISCLAIMER\!\ This\ method\ is\ very,\ very\ long.\r\n\ The\ reason\ is\:\ there\ are\ a\ LOT\ of\ String\ literals\r\n\ and\ decision\ trees.\ Storing\ them\ in\ a\ data\ structure\r\n\ would\ have\ been\ inefficient,\ as\ each\ charachter\ has\ it's\ own\r\n\ unique\ decision\ tree.\r\n\ \r\n\ @param\ command\ the\ issuing\ command\r\n
comment24.params=
comment24.target=void\ gameEnd()
comment24.text=\r\n\ The\ player\ has\ won\ the\ game\r\n\ Based\ on\ his\ choice,\ decide\ which\ ending\r\n\ to\ display.\ Then\ ask\ the\ player\r\n\ if\ he\ wants\ to\ continue\ playing\r\n
comment25.params=command
comment25.target=void\ showQuestLog(Command)
comment25.text=\r\n\ "quest"\ was\ issued\r\n\ show\ the\ player\ a\ Log\ of\ his\ quests\r\n\ or\ display\ information\ about\ a\ specific\ quest\r\n\ The\ quest\ Log\ only\ displays\ info\ about\ \r\n\ the\ quests\ which\ have\ been\ started.\r\n\ @param\ command\ the\ issuing\ command\r\n
comment26.params=index
comment26.target=Room\ getRoomAtIndex(int)
comment26.text=\r\n\ Get\ a\ room\ at\ a\ specific\ index\r\n\ from\ the\ Game\ ArrayList\ collection\r\n\ \r\n\ @param\ index\ the\ index\ for\ the\ room\r\n\ @return\ room\ the\ returned\ room\r\n
comment27.params=
comment27.target=int\ getNumberOfRooms()
comment27.text=\r\n\ Get\ the\ total\ number\ of\ rooms\r\n\ in\ the\ game\r\n\ @return\ number\ of\ total\ Rooms\r\n
comment28.params=
comment28.target=Room\ getCurrentRoom()
comment28.text=\r\n\ Get\ the\ room\ in\ which\ the\ player\ is\ \r\n\ currently\ in.\r\n\ @return\ the\ room\ in\ which\r\n\ the\ player\ is\ currently\ in.\r\n
comment3.params=
comment3.target=void\ createRooms()
comment3.text=\r\n\ Create\ all\ the\ rooms\ and\ link\ their\ exits\ together.\r\n\ Create\ the\ items,\ charachters\ and\ quests.\r\n\ Store\ them\ in\ their\ respective\ places.\r\n
comment4.params=
comment4.target=void\ play()
comment4.text=\r\n\ \ Main\ play\ routine.\ \ Loops\ until\ end\ of\ play.\r\n
comment5.params=
comment5.target=void\ displayWelcome()
comment5.text=\r\n\ Print\ out\ the\ opening\ message\ for\ the\ player.\r\n\ Get\ the\ difficulty\ from\ the\ player.\r\n\ Initialize\ the\ gamePlay\ objects\ accordingly\r\n\ Introduce\ the\ player\ to\ the\ story\r\n
comment6.params=
comment6.target=void\ setUpDifficulty()
comment6.text=\r\n\ Ask\ the\ player\ to\ select\ a\ difficulty\ level\ \r\n\ out\ of\ three\ options.\r\n\ Loop\ until\ he\ has\ chosen\ a\ valid\ difficulty\r\n
comment7.params=
comment7.target=void\ startTheGame()
comment7.text=\r\n\ Ask\ the\ player\ to\ confirm\ game\ start\r\n\ loop\ until\ he\ provides\ valid\ input\r\n
comment8.params=
comment8.target=void\ setPlayerName()
comment8.text=\r\n\ Get\ the\ player's\ name\r\n\ if\ his\ input\ is\ too\ short,\ try\ again\r\n
comment9.params=command
comment9.target=boolean\ processCommand(Command)
comment9.text=\r\n\ Given\ a\ command,\ process\ (that\ is\:\ execute)\ the\ command.\r\n\ @param\ command\ The\ command\ to\ be\ processed.\r\n\ @return\ true\ If\ the\ command\ ends\ the\ game,\ false\ otherwise.\r\n
numComments=29
